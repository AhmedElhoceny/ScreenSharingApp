@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Screen Sharing App</h1>
    <button id="startButton" class="btn btn-primary">Start Screen Sharing</button>
    <video id="localVideo" autoplay playsinline style="width: 45%;"></video>
    <video id="remoteVideo" autoplay playsinline style="width: 45%;"></video>
</div>

<!-- Load SignalR Client Library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<!-- Load WebRTC Adapter for cross-browser support -->
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/screensharehub").build();

    const startButton = document.getElementById('startButton');
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');

    let localStream;
    let peerConnection;

    connection.start().then(() => {
        console.log('Connected to SignalR');
    }).catch(err => console.error(err.toString()));

    startButton.addEventListener('click', async () => {
        localStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;

        peerConnection = new RTCPeerConnection();

        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                connection.invoke('SendCandidate', 'user', JSON.stringify(event.candidate));
            }
        };

        peerConnection.ontrack = event => {
            remoteVideo.srcObject = event.streams[0];
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        connection.invoke('SendOffer', 'user', JSON.stringify(offer));
    });

    connection.on('ReceiveOffer', async offer => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));

        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);

        connection.invoke('SendAnswer', 'user', JSON.stringify(answer));
    });

    connection.on('ReceiveAnswer', async answer => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
    });

    connection.on('ReceiveCandidate', async candidate => {
        await peerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)));
    });
</script>